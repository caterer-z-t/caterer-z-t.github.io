"use strict";

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
            }
        }
    }
    return target;
};

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();

var BareFoot = function () {
    function BareFoot(options) {
        _classCallCheck(this, BareFoot);

        var defaults = {
            scope: "body",
            divFootnotesQuery: ".footnotes",
            footnotesQuery: "[id^='fn']",
            supQuery: "a[href^='#fnref']",
            fnButtonMarkup: '<button class="footnote-button" id="{{FOOTNOTEREFID}}" data-footnote="{{FOOTNOTEID}}" alt="See Footnote {{FOOTNOTENUMBER}}" rel="footnote" data-fn-number="{{FOOTNOTENUMBER}}" data-fn-content="{{FOOTNOTECONTENT}}"></button>',
            fnContentMarkup: '<div class="bf-footnote" id="{{FOOTNOTEID}}"><div class="footnote-wrapper"><div class="footnote-content" tabindex="0">{{FOOTNOTECONTENT}}</div></div><div class="footnote-tooltip" aria-hidden="true"></div>',
            activeCallback: null,
            activeBtnClass: "is-active",
            activeFnClass: "footnote-is-active",
            backdropClass: "footnote-backdrop",
            buttonClass: "footnote-button",
            fnContainer: "footnote-container",
            fnClass: "bf-footnote",
            fnContentClass: "footnote-content",
            fnWrapperClass: "footnote-wrapper",
            tooltipClass: "footnote-tooltip",
            fnOnTopClass: "footnote-is-top"
        };

        this.config = _extends({}, defaults, options);
        this.divFootnotes = [].slice.call(document.querySelectorAll(this.config.divFootnotesQuery));
        if (!this.divFootnotes) return false;

        this.footnotes = this.divFootnotes.map(function (el) {
            return el.querySelectorAll(this.config.footnotesQuery);
        }.bind(this));

        Element.prototype.matches = Element.prototype.matches ||
            Element.prototype.mozMatchesSelector ||
            Element.prototype.msMatchesSelector ||
            Element.prototype.oMatchesSelector ||
            Element.prototype.webkitMatchesSelector ||
            function (selector) {
                return [].indexOf.call(document.querySelectorAll(selector), this) !== -1;
            };

        Element.prototype.closest = Element.prototype.closest || function (selector) {
            var element = this;
            while (element !== null) {
                var parent = element.parentElement;
                if (parent !== null && parent.matches(selector)) return parent;
                element = parent;
            }
            return null;
        };

        var scrollDiv = document.createElement("div");
        scrollDiv.style.cssText = "width: 100px; height: 100px; overflow: scroll; position: absolute; top: -9999px; visibility: hidden;";
        document.body.appendChild(scrollDiv);
        this.scrollBarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        document.body.removeChild(scrollDiv);
    }

    _createClass(BareFoot, [{
        key: "removeBackLinks",
        value: function removeBackLinks(html, id) {
            if (id.indexOf(" ") >= 0) {
                id = id.trim().replace(/\s+/g, "|").replace(/(.*)/g, "($1)");
            }
            if (id.indexOf("#") === 0) {
                id = id.slice(1);
            }
            var regex = new RegExp("(\\s|&nbsp;)*<\\s*a[^#<]*#" + id + "[^>]*>(.*?)<\\s*/\\s*a>", "g");
            return html.replace(regex, "").replace("[]", "");
        }
    }]);

    return BareFoot;
}();
